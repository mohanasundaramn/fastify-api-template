import * as fs from 'node:fs';
import * as dotenv from 'dotenv';

// Load the .env file directly
const envFilePath = './.env';
const envConfig = dotenv.parse(fs.readFileSync(envFilePath));

// Dynamically generate the schema based on the keys in the .env file
const schemaProperties = Object.keys(envConfig).reduce<Record<string, string>>(
	(acc, key) => {
		const value = envConfig[key];
		if (value === 'true' || value === 'false') {
			acc[key] = 'Type.Boolean()';
		} else if (!Number.isNaN(Number(value))) {
			acc[key] = 'Type.Number()';
		} else {
			acc[key] = 'Type.String()';
		}
		return acc;
	},
	{},
);

const schemaContent = `// This file is auto-generated from the .env file.
// Do not edit this file directly.
import { type Static, Type } from '@sinclair/typebox';

export const envSchema = Type.Object({
${Object.entries(schemaProperties)
	.map(([key, type]) => `  ${key}: ${type},`)
	.join('\n')}
});

export type EnvType = Static<typeof envSchema>;
`;

// Write the schema to a TypeScript file
const outputPath = './src/schemas/env.schema.ts';
fs.writeFileSync(outputPath, schemaContent);

console.log(`Environment schema generated at ${outputPath}`);
